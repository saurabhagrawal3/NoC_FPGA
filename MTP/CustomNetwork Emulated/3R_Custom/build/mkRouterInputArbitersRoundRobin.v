/*
 * These source files contain a hardware description of a network
 * automatically generated by CONNECT (CONfigurable NEtwork Creation Tool).
 *
 * This product includes a hardware design developed by Carnegie Mellon
 * University.
 *
 * Copyright (c) 2012 by Michael K. Papamichael, Carnegie Mellon University
 *
 * For more information, see the CONNECT project website at:
 *   http://www.ece.cmu.edu/~mpapamic/connect
 *
 * This design is provided for internal, non-commercial research use only, 
 * cannot be used for, or in support of, goods or services, and is not for
 * redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */


//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sat Oct  4 06:03:12 EDT 2014
//
// Method conflict info:
// Method: input_arbs_0_select
// Conflict-free: input_arbs_0_select,
// 	       input_arbs_1_select,
// 	       input_arbs_1_next,
// 	       input_arbs_2_select,
// 	       input_arbs_2_next
// Sequenced before: input_arbs_0_next
//
// Method: input_arbs_0_next
// Conflict-free: input_arbs_1_select,
// 	       input_arbs_1_next,
// 	       input_arbs_2_select,
// 	       input_arbs_2_next
// Sequenced after: input_arbs_0_select
// Conflicts: input_arbs_0_next
//
// Method: input_arbs_1_select
// Conflict-free: input_arbs_0_select,
// 	       input_arbs_0_next,
// 	       input_arbs_1_select,
// 	       input_arbs_2_select,
// 	       input_arbs_2_next
// Sequenced before: input_arbs_1_next
//
// Method: input_arbs_1_next
// Conflict-free: input_arbs_0_select,
// 	       input_arbs_0_next,
// 	       input_arbs_2_select,
// 	       input_arbs_2_next
// Sequenced after: input_arbs_1_select
// Conflicts: input_arbs_1_next
//
// Method: input_arbs_2_select
// Conflict-free: input_arbs_0_select,
// 	       input_arbs_0_next,
// 	       input_arbs_1_select,
// 	       input_arbs_1_next,
// 	       input_arbs_2_select
// Sequenced before: input_arbs_2_next
//
// Method: input_arbs_2_next
// Conflict-free: input_arbs_0_select,
// 	       input_arbs_0_next,
// 	       input_arbs_1_select,
// 	       input_arbs_1_next
// Sequenced after: input_arbs_2_select
// Conflicts: input_arbs_2_next
//
//
// Ports:
// Name                         I/O  size props
// input_arbs_0_select            O     3
// input_arbs_1_select            O     3
// input_arbs_2_select            O     3
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_arbs_0_select_requests   I     3
// input_arbs_1_select_requests   I     3
// input_arbs_2_select_requests   I     3
// EN_input_arbs_0_next           I     1
// EN_input_arbs_1_next           I     1
// EN_input_arbs_2_next           I     1
//
// Combinational paths from inputs to outputs:
//   input_arbs_0_select_requests -> input_arbs_0_select
//   input_arbs_1_select_requests -> input_arbs_1_select
//   input_arbs_2_select_requests -> input_arbs_2_select
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkRouterInputArbitersRoundRobin_1(CLK,
				       RST_N,

				       input_arbs_0_select_requests,
				       input_arbs_0_select,

				       EN_input_arbs_0_next,

				       input_arbs_1_select_requests,
				       input_arbs_1_select,

				       EN_input_arbs_1_next,

				       input_arbs_2_select_requests,
				       input_arbs_2_select,

				       EN_input_arbs_2_next);
  input  CLK;
  input  RST_N;

  // value method input_arbs_0_select
  input  [2 : 0] input_arbs_0_select_requests;
  output [2 : 0] input_arbs_0_select;

  // action method input_arbs_0_next
  input  EN_input_arbs_0_next;

  // value method input_arbs_1_select
  input  [2 : 0] input_arbs_1_select_requests;
  output [2 : 0] input_arbs_1_select;

  // action method input_arbs_1_next
  input  EN_input_arbs_1_next;

  // value method input_arbs_2_select
  input  [2 : 0] input_arbs_2_select_requests;
  output [2 : 0] input_arbs_2_select;

  // action method input_arbs_2_next
  input  EN_input_arbs_2_next;

  // signals for module outputs
  wire [2 : 0] input_arbs_0_select, input_arbs_1_select, input_arbs_2_select;

  // register ias_0_token
  reg [2 : 0] ias_0_token;
  wire [2 : 0] ias_0_token$D_IN;
  wire ias_0_token$EN;

  // register ias_1_token
  reg [2 : 0] ias_1_token;
  wire [2 : 0] ias_1_token$D_IN;
  wire ias_1_token$EN;

  // register ias_2_token
  reg [2 : 0] ias_2_token;
  wire [2 : 0] ias_2_token$D_IN;
  wire ias_2_token$EN;

  // remaining internal signals
  wire [1 : 0] ab__h10521,
	       ab__h10814,
	       ab__h11053,
	       ab__h2448,
	       ab__h2463,
	       ab__h2478,
	       ab__h3361,
	       ab__h3654,
	       ab__h3893,
	       ab__h6028,
	       ab__h6043,
	       ab__h6058,
	       ab__h6941,
	       ab__h7234,
	       ab__h7473,
	       ab__h9608,
	       ab__h9623,
	       ab__h9638;
  wire NOT_gen_grant_carry_0_BIT_1_1_0_AND_NOT_gen_gr_ETC___d74,
       NOT_gen_grant_carry_2_BIT_1_3_2_AND_NOT_gen_gr_ETC___d36,
       NOT_gen_grant_carry_8_BIT_1_9_8_AND_NOT_gen_gr_ETC___d112,
       ab_BIT_0___h10038,
       ab_BIT_0___h10145,
       ab_BIT_0___h10562,
       ab_BIT_0___h10630,
       ab_BIT_0___h10869,
       ab_BIT_0___h2878,
       ab_BIT_0___h2985,
       ab_BIT_0___h3402,
       ab_BIT_0___h3470,
       ab_BIT_0___h3709,
       ab_BIT_0___h6458,
       ab_BIT_0___h6565,
       ab_BIT_0___h6982,
       ab_BIT_0___h7050,
       ab_BIT_0___h7289,
       ias_0_token_BIT_0___h2876,
       ias_0_token_BIT_1___h2983,
       ias_0_token_BIT_2___h3090,
       ias_1_token_BIT_0___h6456,
       ias_1_token_BIT_1___h6563,
       ias_1_token_BIT_2___h6670,
       ias_2_token_BIT_0___h10036,
       ias_2_token_BIT_1___h10143,
       ias_2_token_BIT_2___h10250;

  // value method input_arbs_0_select
  assign input_arbs_0_select =
	     { ab__h2448[1] || ab__h3361[1],
	       !ab__h2448[1] && !ab__h3361[1] &&
	       (ab__h2463[1] || ab__h3654[1]),
	       NOT_gen_grant_carry_2_BIT_1_3_2_AND_NOT_gen_gr_ETC___d36 } ;

  // value method input_arbs_1_select
  assign input_arbs_1_select =
	     { ab__h6028[1] || ab__h6941[1],
	       !ab__h6028[1] && !ab__h6941[1] &&
	       (ab__h6043[1] || ab__h7234[1]),
	       NOT_gen_grant_carry_0_BIT_1_1_0_AND_NOT_gen_gr_ETC___d74 } ;

  // value method input_arbs_2_select
  assign input_arbs_2_select =
	     { ab__h9608[1] || ab__h10521[1],
	       !ab__h9608[1] && !ab__h10521[1] &&
	       (ab__h9623[1] || ab__h10814[1]),
	       NOT_gen_grant_carry_8_BIT_1_9_8_AND_NOT_gen_gr_ETC___d112 } ;

  // register ias_0_token
  assign ias_0_token$D_IN = { ias_0_token[0], ias_0_token[2:1] } ;
  assign ias_0_token$EN = EN_input_arbs_0_next ;

  // register ias_1_token
  assign ias_1_token$D_IN = { ias_1_token[0], ias_1_token[2:1] } ;
  assign ias_1_token$EN = EN_input_arbs_1_next ;

  // register ias_2_token
  assign ias_2_token$D_IN = { ias_2_token[0], ias_2_token[2:1] } ;
  assign ias_2_token$EN = EN_input_arbs_2_next ;

  // remaining internal signals
  module_gen_grant_carry_1 instance_gen_grant_carry_15(.gen_grant_carry_c(1'd0),
						     .gen_grant_carry_r(input_arbs_0_select_requests[0]),
						     .gen_grant_carry_p(ias_0_token_BIT_0___h2876),
						     .gen_grant_carry(ab__h2478));
  module_gen_grant_carry_1 instance_gen_grant_carry_1(.gen_grant_carry_c(ab_BIT_0___h2878),
						    .gen_grant_carry_r(input_arbs_0_select_requests[1]),
						    .gen_grant_carry_p(ias_0_token_BIT_1___h2983),
						    .gen_grant_carry(ab__h2463));
  module_gen_grant_carry_1 instance_gen_grant_carry_0(.gen_grant_carry_c(ab_BIT_0___h2985),
						    .gen_grant_carry_r(input_arbs_0_select_requests[2]),
						    .gen_grant_carry_p(ias_0_token_BIT_2___h3090),
						    .gen_grant_carry(ab__h2448));
  module_gen_grant_carry_1 instance_gen_grant_carry_2(.gen_grant_carry_c(ab_BIT_0___h3402),
						    .gen_grant_carry_r(input_arbs_0_select_requests[0]),
						    .gen_grant_carry_p(ias_0_token_BIT_0___h2876),
						    .gen_grant_carry(ab__h3893));
  module_gen_grant_carry_1 instance_gen_grant_carry_3(.gen_grant_carry_c(ab_BIT_0___h3709),
						    .gen_grant_carry_r(input_arbs_0_select_requests[1]),
						    .gen_grant_carry_p(ias_0_token_BIT_1___h2983),
						    .gen_grant_carry(ab__h3654));
  module_gen_grant_carry_1 instance_gen_grant_carry_4(.gen_grant_carry_c(ab_BIT_0___h3470),
						    .gen_grant_carry_r(input_arbs_0_select_requests[2]),
						    .gen_grant_carry_p(ias_0_token_BIT_2___h3090),
						    .gen_grant_carry(ab__h3361));
  module_gen_grant_carry_1 instance_gen_grant_carry_16(.gen_grant_carry_c(1'd0),
						     .gen_grant_carry_r(input_arbs_1_select_requests[0]),
						     .gen_grant_carry_p(ias_1_token_BIT_0___h6456),
						     .gen_grant_carry(ab__h6058));
  module_gen_grant_carry_1 instance_gen_grant_carry_5(.gen_grant_carry_c(ab_BIT_0___h6458),
						    .gen_grant_carry_r(input_arbs_1_select_requests[1]),
						    .gen_grant_carry_p(ias_1_token_BIT_1___h6563),
						    .gen_grant_carry(ab__h6043));
  module_gen_grant_carry_1 instance_gen_grant_carry_6(.gen_grant_carry_c(ab_BIT_0___h6565),
						    .gen_grant_carry_r(input_arbs_1_select_requests[2]),
						    .gen_grant_carry_p(ias_1_token_BIT_2___h6670),
						    .gen_grant_carry(ab__h6028));
  module_gen_grant_carry_1 instance_gen_grant_carry_7(.gen_grant_carry_c(ab_BIT_0___h6982),
						    .gen_grant_carry_r(input_arbs_1_select_requests[0]),
						    .gen_grant_carry_p(ias_1_token_BIT_0___h6456),
						    .gen_grant_carry(ab__h7473));
  module_gen_grant_carry_1 instance_gen_grant_carry_8(.gen_grant_carry_c(ab_BIT_0___h7289),
						    .gen_grant_carry_r(input_arbs_1_select_requests[1]),
						    .gen_grant_carry_p(ias_1_token_BIT_1___h6563),
						    .gen_grant_carry(ab__h7234));
  module_gen_grant_carry_1 instance_gen_grant_carry_9(.gen_grant_carry_c(ab_BIT_0___h7050),
						    .gen_grant_carry_r(input_arbs_1_select_requests[2]),
						    .gen_grant_carry_p(ias_1_token_BIT_2___h6670),
						    .gen_grant_carry(ab__h6941));
  module_gen_grant_carry_1 instance_gen_grant_carry_17(.gen_grant_carry_c(1'd0),
						     .gen_grant_carry_r(input_arbs_2_select_requests[0]),
						     .gen_grant_carry_p(ias_2_token_BIT_0___h10036),
						     .gen_grant_carry(ab__h9638));
  module_gen_grant_carry_1 instance_gen_grant_carry_10(.gen_grant_carry_c(ab_BIT_0___h10038),
						     .gen_grant_carry_r(input_arbs_2_select_requests[1]),
						     .gen_grant_carry_p(ias_2_token_BIT_1___h10143),
						     .gen_grant_carry(ab__h9623));
  module_gen_grant_carry_1 instance_gen_grant_carry_11(.gen_grant_carry_c(ab_BIT_0___h10145),
						     .gen_grant_carry_r(input_arbs_2_select_requests[2]),
						     .gen_grant_carry_p(ias_2_token_BIT_2___h10250),
						     .gen_grant_carry(ab__h9608));
  module_gen_grant_carry_1 instance_gen_grant_carry_12(.gen_grant_carry_c(ab_BIT_0___h10562),
						     .gen_grant_carry_r(input_arbs_2_select_requests[0]),
						     .gen_grant_carry_p(ias_2_token_BIT_0___h10036),
						     .gen_grant_carry(ab__h11053));
  module_gen_grant_carry_1 instance_gen_grant_carry_13(.gen_grant_carry_c(ab_BIT_0___h10869),
						     .gen_grant_carry_r(input_arbs_2_select_requests[1]),
						     .gen_grant_carry_p(ias_2_token_BIT_1___h10143),
						     .gen_grant_carry(ab__h10814));
  module_gen_grant_carry_1 instance_gen_grant_carry_14(.gen_grant_carry_c(ab_BIT_0___h10630),
						     .gen_grant_carry_r(input_arbs_2_select_requests[2]),
						     .gen_grant_carry_p(ias_2_token_BIT_2___h10250),
						     .gen_grant_carry(ab__h10521));
  assign NOT_gen_grant_carry_0_BIT_1_1_0_AND_NOT_gen_gr_ETC___d74 =
	     !ab__h6028[1] && !ab__h6941[1] && !ab__h6043[1] &&
	     !ab__h7234[1] &&
	     (ab__h6058[1] || ab__h7473[1]) ;
  assign NOT_gen_grant_carry_2_BIT_1_3_2_AND_NOT_gen_gr_ETC___d36 =
	     !ab__h2448[1] && !ab__h3361[1] && !ab__h2463[1] &&
	     !ab__h3654[1] &&
	     (ab__h2478[1] || ab__h3893[1]) ;
  assign NOT_gen_grant_carry_8_BIT_1_9_8_AND_NOT_gen_gr_ETC___d112 =
	     !ab__h9608[1] && !ab__h10521[1] && !ab__h9623[1] &&
	     !ab__h10814[1] &&
	     (ab__h9638[1] || ab__h11053[1]) ;
  assign ab_BIT_0___h10038 = ab__h9638[0] ;
  assign ab_BIT_0___h10145 = ab__h9623[0] ;
  assign ab_BIT_0___h10562 = ab__h9608[0] ;
  assign ab_BIT_0___h10630 = ab__h10814[0] ;
  assign ab_BIT_0___h10869 = ab__h11053[0] ;
  assign ab_BIT_0___h2878 = ab__h2478[0] ;
  assign ab_BIT_0___h2985 = ab__h2463[0] ;
  assign ab_BIT_0___h3402 = ab__h2448[0] ;
  assign ab_BIT_0___h3470 = ab__h3654[0] ;
  assign ab_BIT_0___h3709 = ab__h3893[0] ;
  assign ab_BIT_0___h6458 = ab__h6058[0] ;
  assign ab_BIT_0___h6565 = ab__h6043[0] ;
  assign ab_BIT_0___h6982 = ab__h6028[0] ;
  assign ab_BIT_0___h7050 = ab__h7234[0] ;
  assign ab_BIT_0___h7289 = ab__h7473[0] ;
  assign ias_0_token_BIT_0___h2876 = ias_0_token[0] ;
  assign ias_0_token_BIT_1___h2983 = ias_0_token[1] ;
  assign ias_0_token_BIT_2___h3090 = ias_0_token[2] ;
  assign ias_1_token_BIT_0___h6456 = ias_1_token[0] ;
  assign ias_1_token_BIT_1___h6563 = ias_1_token[1] ;
  assign ias_1_token_BIT_2___h6670 = ias_1_token[2] ;
  assign ias_2_token_BIT_0___h10036 = ias_2_token[0] ;
  assign ias_2_token_BIT_1___h10143 = ias_2_token[1] ;
  assign ias_2_token_BIT_2___h10250 = ias_2_token[2] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        ias_0_token <= `BSV_ASSIGNMENT_DELAY 3'd1;
	ias_1_token <= `BSV_ASSIGNMENT_DELAY 3'd2;
	ias_2_token <= `BSV_ASSIGNMENT_DELAY 3'd4;
      end
    else
      begin
        if (ias_0_token$EN)
	  ias_0_token <= `BSV_ASSIGNMENT_DELAY ias_0_token$D_IN;
	if (ias_1_token$EN)
	  ias_1_token <= `BSV_ASSIGNMENT_DELAY ias_1_token$D_IN;
	if (ias_2_token$EN)
	  ias_2_token <= `BSV_ASSIGNMENT_DELAY ias_2_token$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ias_0_token = 3'h2;
    ias_1_token = 3'h2;
    ias_2_token = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRouterInputArbitersRoundRobin

