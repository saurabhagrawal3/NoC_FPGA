/*
 * These source files contain a hardware description of a network
 * automatically generated by CONNECT (CONfigurable NEtwork Creation Tool).
 *
 * This product includes a hardware design developed by Carnegie Mellon
 * University.
 *
 * Copyright (c) 2012 by Michael K. Papamichael, Carnegie Mellon University
 *
 * For more information, see the CONNECT project website at:
 *   http://www.ece.cmu.edu/~mpapamic/connect
 *
 * This design is provided for internal, non-commercial research use only, 
 * cannot be used for, or in support of, goods or services, and is not for
 * redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */


//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sat Oct  4 06:03:28 EDT 2014
//
// Method conflict info:
// Method: in_ports_0_putRoutedFlit
// Conflict-free: in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs
// Conflicts: in_ports_0_putRoutedFlit
//
// Method: in_ports_0_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs
//
// Method: in_ports_1_putRoutedFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs
// Conflicts: in_ports_1_putRoutedFlit
//
// Method: in_ports_1_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs
//
// Method: in_ports_2_putRoutedFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs
// Conflicts: in_ports_2_putRoutedFlit
//
// Method: in_ports_2_getNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_getFlit,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_getFlit,
// 	       out_ports_2_putNonFullVCs
//
// Method: out_ports_0_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs
//
// Method: out_ports_0_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_1_putNonFullVCs,
// 	       out_ports_2_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit
// Conflicts: out_ports_0_putNonFullVCs
//
// Method: out_ports_1_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs
//
// Method: out_ports_1_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_2_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit
// Conflicts: out_ports_1_putNonFullVCs
//
// Method: out_ports_2_getFlit
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_getFlit,
// 	       out_ports_1_getFlit,
// 	       out_ports_2_getFlit
// Sequenced after (restricted): out_ports_0_putNonFullVCs,
// 			      out_ports_1_putNonFullVCs,
// 			      out_ports_2_putNonFullVCs
//
// Method: out_ports_2_putNonFullVCs
// Conflict-free: in_ports_0_putRoutedFlit,
// 	       in_ports_0_getNonFullVCs,
// 	       in_ports_1_putRoutedFlit,
// 	       in_ports_1_getNonFullVCs,
// 	       in_ports_2_putRoutedFlit,
// 	       in_ports_2_getNonFullVCs,
// 	       out_ports_0_putNonFullVCs,
// 	       out_ports_1_putNonFullVCs
// Sequenced before (restricted): out_ports_0_getFlit,
// 			       out_ports_1_getFlit,
// 			       out_ports_2_getFlit
// Conflicts: out_ports_2_putNonFullVCs
//
//
// Ports:
// Name                         I/O  size props
// in_ports_0_getNonFullVCs       O     2 reg
// in_ports_1_getNonFullVCs       O     2 reg
// in_ports_2_getNonFullVCs       O     2 reg
// out_ports_0_getFlit            O    16
// out_ports_1_getFlit            O    16
// out_ports_2_getFlit            O    16
// CLK                            I     1 clock
// RST_N                          I     1 reset
// in_ports_0_putRoutedFlit_flit_in  I    18
// in_ports_1_putRoutedFlit_flit_in  I    18
// in_ports_2_putRoutedFlit_flit_in  I    18
// out_ports_0_putNonFullVCs_nonFullVCs  I     2
// out_ports_1_putNonFullVCs_nonFullVCs  I     2
// out_ports_2_putNonFullVCs_nonFullVCs  I     2
// EN_in_ports_0_putRoutedFlit    I     1
// EN_in_ports_1_putRoutedFlit    I     1
// EN_in_ports_2_putRoutedFlit    I     1
// EN_out_ports_0_putNonFullVCs   I     1
// EN_out_ports_1_putNonFullVCs   I     1
// EN_out_ports_2_putNonFullVCs   I     1
// EN_in_ports_0_getNonFullVCs    I     1 unused
// EN_in_ports_1_getNonFullVCs    I     1 unused
// EN_in_ports_2_getNonFullVCs    I     1 unused
// EN_out_ports_0_getFlit         I     1 unused
// EN_out_ports_1_getFlit         I     1 unused
// EN_out_ports_2_getFlit         I     1 unused
//
// Combinational paths from inputs to outputs:
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs) -> out_ports_0_getFlit
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs) -> out_ports_1_getFlit
//   (out_ports_0_putNonFullVCs_nonFullVCs,
//    out_ports_1_putNonFullVCs_nonFullVCs,
//    out_ports_2_putNonFullVCs_nonFullVCs,
//    EN_out_ports_0_putNonFullVCs,
//    EN_out_ports_1_putNonFullVCs,
//    EN_out_ports_2_putNonFullVCs) -> out_ports_2_getFlit
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkRouterCoreSimple(CLK,
			  RST_N,

			  in_ports_0_putRoutedFlit_flit_in,
			  EN_in_ports_0_putRoutedFlit,

			  EN_in_ports_0_getNonFullVCs,
			  in_ports_0_getNonFullVCs,

			  in_ports_1_putRoutedFlit_flit_in,
			  EN_in_ports_1_putRoutedFlit,

			  EN_in_ports_1_getNonFullVCs,
			  in_ports_1_getNonFullVCs,

			  in_ports_2_putRoutedFlit_flit_in,
			  EN_in_ports_2_putRoutedFlit,

			  EN_in_ports_2_getNonFullVCs,
			  in_ports_2_getNonFullVCs,

			  EN_out_ports_0_getFlit,
			  out_ports_0_getFlit,

			  out_ports_0_putNonFullVCs_nonFullVCs,
			  EN_out_ports_0_putNonFullVCs,

			  EN_out_ports_1_getFlit,
			  out_ports_1_getFlit,

			  out_ports_1_putNonFullVCs_nonFullVCs,
			  EN_out_ports_1_putNonFullVCs,

			  EN_out_ports_2_getFlit,
			  out_ports_2_getFlit,

			  out_ports_2_putNonFullVCs_nonFullVCs,
			  EN_out_ports_2_putNonFullVCs);
  input  CLK;
  input  RST_N;

  // action method in_ports_0_putRoutedFlit
  input  [17 : 0] in_ports_0_putRoutedFlit_flit_in;
  input  EN_in_ports_0_putRoutedFlit;

  // actionvalue method in_ports_0_getNonFullVCs
  input  EN_in_ports_0_getNonFullVCs;
  output [1 : 0] in_ports_0_getNonFullVCs;

  // action method in_ports_1_putRoutedFlit
  input  [17 : 0] in_ports_1_putRoutedFlit_flit_in;
  input  EN_in_ports_1_putRoutedFlit;

  // actionvalue method in_ports_1_getNonFullVCs
  input  EN_in_ports_1_getNonFullVCs;
  output [1 : 0] in_ports_1_getNonFullVCs;

  // action method in_ports_2_putRoutedFlit
  input  [17 : 0] in_ports_2_putRoutedFlit_flit_in;
  input  EN_in_ports_2_putRoutedFlit;

  // actionvalue method in_ports_2_getNonFullVCs
  input  EN_in_ports_2_getNonFullVCs;
  output [1 : 0] in_ports_2_getNonFullVCs;

  // actionvalue method out_ports_0_getFlit
  input  EN_out_ports_0_getFlit;
  output [15 : 0] out_ports_0_getFlit;

  // action method out_ports_0_putNonFullVCs
  input  [1 : 0] out_ports_0_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_0_putNonFullVCs;

  // actionvalue method out_ports_1_getFlit
  input  EN_out_ports_1_getFlit;
  output [15 : 0] out_ports_1_getFlit;

  // action method out_ports_1_putNonFullVCs
  input  [1 : 0] out_ports_1_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_1_putNonFullVCs;

  // actionvalue method out_ports_2_getFlit
  input  EN_out_ports_2_getFlit;
  output [15 : 0] out_ports_2_getFlit;

  // action method out_ports_2_putNonFullVCs
  input  [1 : 0] out_ports_2_putNonFullVCs_nonFullVCs;
  input  EN_out_ports_2_putNonFullVCs;

  // signals for module outputs
  wire [15 : 0] out_ports_0_getFlit, out_ports_1_getFlit, out_ports_2_getFlit;
  wire [1 : 0] in_ports_0_getNonFullVCs,
	       in_ports_1_getNonFullVCs,
	       in_ports_2_getNonFullVCs;

  // inlined wires
  wire [15 : 0] hasFlitsToSend_perIn$wget,
		hasFlitsToSend_perIn_1$wget,
		hasFlitsToSend_perIn_2$wget;

  // register activeVC_perIn_reg
  reg [1 : 0] activeVC_perIn_reg;
  wire [1 : 0] activeVC_perIn_reg$D_IN;
  wire activeVC_perIn_reg$EN;

  // register activeVC_perIn_reg_1
  reg [1 : 0] activeVC_perIn_reg_1;
  wire [1 : 0] activeVC_perIn_reg_1$D_IN;
  wire activeVC_perIn_reg_1$EN;

  // register activeVC_perIn_reg_2
  reg [1 : 0] activeVC_perIn_reg_2;
  wire [1 : 0] activeVC_perIn_reg_2$D_IN;
  wire activeVC_perIn_reg_2$EN;

  // register inPortVL_0
  reg [1 : 0] inPortVL_0;
  wire [1 : 0] inPortVL_0$D_IN;
  wire inPortVL_0$EN;

  // register inPortVL_0_1
  reg [1 : 0] inPortVL_0_1;
  wire [1 : 0] inPortVL_0_1$D_IN;
  wire inPortVL_0_1$EN;

  // register inPortVL_1
  reg [1 : 0] inPortVL_1;
  wire [1 : 0] inPortVL_1$D_IN;
  wire inPortVL_1$EN;

  // register inPortVL_1_1
  reg [1 : 0] inPortVL_1_1;
  wire [1 : 0] inPortVL_1_1$D_IN;
  wire inPortVL_1_1$EN;

  // register inPortVL_2
  reg [1 : 0] inPortVL_2;
  wire [1 : 0] inPortVL_2$D_IN;
  wire inPortVL_2$EN;

  // register inPortVL_2_1
  reg [1 : 0] inPortVL_2_1;
  wire [1 : 0] inPortVL_2_1$D_IN;
  wire inPortVL_2_1$EN;

  // register lockedVL_0
  reg lockedVL_0;
  wire lockedVL_0$D_IN, lockedVL_0$EN;

  // register lockedVL_0_1
  reg lockedVL_0_1;
  wire lockedVL_0_1$D_IN, lockedVL_0_1$EN;

  // register lockedVL_1
  reg lockedVL_1;
  wire lockedVL_1$D_IN, lockedVL_1$EN;

  // register lockedVL_1_1
  reg lockedVL_1_1;
  wire lockedVL_1_1$D_IN, lockedVL_1_1$EN;

  // register lockedVL_2
  reg lockedVL_2;
  wire lockedVL_2$D_IN, lockedVL_2$EN;

  // register lockedVL_2_1
  reg lockedVL_2_1;
  wire lockedVL_2_1$D_IN, lockedVL_2_1$EN;

  // register selectedIO_reg_0
  reg selectedIO_reg_0;
  wire selectedIO_reg_0$D_IN, selectedIO_reg_0$EN;

  // register selectedIO_reg_0_1
  reg selectedIO_reg_0_1;
  wire selectedIO_reg_0_1$D_IN, selectedIO_reg_0_1$EN;

  // register selectedIO_reg_0_2
  reg selectedIO_reg_0_2;
  wire selectedIO_reg_0_2$D_IN, selectedIO_reg_0_2$EN;

  // register selectedIO_reg_1
  reg selectedIO_reg_1;
  wire selectedIO_reg_1$D_IN, selectedIO_reg_1$EN;

  // register selectedIO_reg_1_1
  reg selectedIO_reg_1_1;
  wire selectedIO_reg_1_1$D_IN, selectedIO_reg_1_1$EN;

  // register selectedIO_reg_1_2
  reg selectedIO_reg_1_2;
  wire selectedIO_reg_1_2$D_IN, selectedIO_reg_1_2$EN;

  // register selectedIO_reg_2
  reg selectedIO_reg_2;
  wire selectedIO_reg_2$D_IN, selectedIO_reg_2$EN;

  // register selectedIO_reg_2_1
  reg selectedIO_reg_2_1;
  wire selectedIO_reg_2_1$D_IN, selectedIO_reg_2_1$EN;

  // register selectedIO_reg_2_2
  reg selectedIO_reg_2_2;
  wire selectedIO_reg_2_2$D_IN, selectedIO_reg_2_2$EN;

  // ports of submodule flitBuffers
  wire [14 : 0] flitBuffers$deq, flitBuffers$enq_data_in;
  wire [1 : 0] flitBuffers$notEmpty, flitBuffers$notFull;
  wire flitBuffers$EN_deq,
       flitBuffers$EN_enq,
       flitBuffers$deq_fifo_out,
       flitBuffers$enq_fifo_in;

  // ports of submodule flitBuffers_1
  wire [14 : 0] flitBuffers_1$deq, flitBuffers_1$enq_data_in;
  wire [1 : 0] flitBuffers_1$notEmpty, flitBuffers_1$notFull;
  wire flitBuffers_1$EN_deq,
       flitBuffers_1$EN_enq,
       flitBuffers_1$deq_fifo_out,
       flitBuffers_1$enq_fifo_in;

  // ports of submodule flitBuffers_2
  wire [14 : 0] flitBuffers_2$deq, flitBuffers_2$enq_data_in;
  wire [1 : 0] flitBuffers_2$notEmpty, flitBuffers_2$notFull;
  wire flitBuffers_2$EN_deq,
       flitBuffers_2$EN_enq,
       flitBuffers_2$deq_fifo_out,
       flitBuffers_2$enq_fifo_in;

  // ports of submodule outPortFIFOs_0
  wire [1 : 0] outPortFIFOs_0$enq_sendData, outPortFIFOs_0$first;
  wire outPortFIFOs_0$EN_clear, outPortFIFOs_0$EN_deq, outPortFIFOs_0$EN_enq;

  // ports of submodule outPortFIFOs_0_1
  wire [1 : 0] outPortFIFOs_0_1$enq_sendData, outPortFIFOs_0_1$first;
  wire outPortFIFOs_0_1$EN_clear,
       outPortFIFOs_0_1$EN_deq,
       outPortFIFOs_0_1$EN_enq;

  // ports of submodule outPortFIFOs_1
  wire [1 : 0] outPortFIFOs_1$enq_sendData, outPortFIFOs_1$first;
  wire outPortFIFOs_1$EN_clear, outPortFIFOs_1$EN_deq, outPortFIFOs_1$EN_enq;

  // ports of submodule outPortFIFOs_1_1
  wire [1 : 0] outPortFIFOs_1_1$enq_sendData, outPortFIFOs_1_1$first;
  wire outPortFIFOs_1_1$EN_clear,
       outPortFIFOs_1_1$EN_deq,
       outPortFIFOs_1_1$EN_enq;

  // ports of submodule outPortFIFOs_2
  wire [1 : 0] outPortFIFOs_2$enq_sendData, outPortFIFOs_2$first;
  wire outPortFIFOs_2$EN_clear, outPortFIFOs_2$EN_deq, outPortFIFOs_2$EN_enq;

  // ports of submodule outPortFIFOs_2_1
  wire [1 : 0] outPortFIFOs_2_1$enq_sendData, outPortFIFOs_2_1$first;
  wire outPortFIFOs_2_1$EN_clear,
       outPortFIFOs_2_1$EN_deq,
       outPortFIFOs_2_1$EN_enq;

  // ports of submodule routerAlloc
  wire [8 : 0] routerAlloc$allocate, routerAlloc$allocate_alloc_input;
  wire routerAlloc$EN_allocate, routerAlloc$EN_next;

  // remaining internal signals
  reg [14 : 0] CASE_active_in5578_hasFlitsToSend_perIn_2wget_ETC__q1,
	       CASE_active_in6933_hasFlitsToSend_perIn_2wget_ETC__q2;
  reg IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d327,
      IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d367,
      IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513,
      IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514,
      IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459,
      IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_NOT_sim_ETC___d136,
      IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simple__ETC___d427,
      IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454,
      IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_NOT_sim_ETC___d162,
      IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simple__ETC___d425,
      IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449,
      IF_outPortFIFOs_2_first_EQ_0_THEN_NOT_simple_c_ETC___d188,
      IF_outPortFIFOs_2_first_EQ_0_THEN_simple_credi_ETC___d423;
  wire [14 : 0] IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d506;
  wire [2 : 0] IF_IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simp_ETC___d98,
	       IF_IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simp_ETC___d71,
	       IF_IF_outPortFIFOs_2_first_EQ_0_THEN_simple_cr_ETC___d44,
	       IF_flitBuffers_1_notEmpty__6_BIT_0_7_THEN_IF_I_ETC___d72,
	       IF_flitBuffers_2_notEmpty_BIT_0_THEN_IF_IF_out_ETC___d45,
	       IF_flitBuffers_notEmpty__3_BIT_0_4_THEN_IF_IF__ETC___d99,
	       outport_encoder___d497,
	       outport_encoder___d498,
	       outport_encoder___d499;
  wire [1 : 0] IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d408,
	       IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d409,
	       active_in__h25578,
	       active_in__h26933;
  wire IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d268,
       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d277,
       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d278,
       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d512,
       IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d491,
       IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d492,
       IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d493,
       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d395,
       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d399,
       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d407,
       IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d469,
       IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d487,
       IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468,
       IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474,
       IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476,
       fifo_out__h17848,
       fifo_out__h18805,
       fifo_out__h19351;

  // actionvalue method in_ports_0_getNonFullVCs
  assign in_ports_0_getNonFullVCs = flitBuffers$notFull ;

  // actionvalue method in_ports_1_getNonFullVCs
  assign in_ports_1_getNonFullVCs = flitBuffers_1$notFull ;

  // actionvalue method in_ports_2_getNonFullVCs
  assign in_ports_2_getNonFullVCs = flitBuffers_2$notFull ;

  // actionvalue method out_ports_0_getFlit
  assign out_ports_0_getFlit =
	     { IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 &&
	       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d278,
	       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d506 } ;

  // actionvalue method out_ports_1_getFlit
  assign out_ports_1_getFlit =
	     { IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 &&
	       IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d327,
	       CASE_active_in5578_hasFlitsToSend_perIn_2wget_ETC__q1 } ;

  // actionvalue method out_ports_2_getFlit
  assign out_ports_2_getFlit =
	     { IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 &&
	       IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d367,
	       CASE_active_in6933_hasFlitsToSend_perIn_2wget_ETC__q2 } ;

  // submodule flitBuffers
  mkInputVCQueues flitBuffers(.CLK(CLK),
			      .RST_N(RST_N),
			      .deq_fifo_out(flitBuffers$deq_fifo_out),
			      .enq_data_in(flitBuffers$enq_data_in),
			      .enq_fifo_in(flitBuffers$enq_fifo_in),
			      .EN_enq(flitBuffers$EN_enq),
			      .EN_deq(flitBuffers$EN_deq),
			      .deq(flitBuffers$deq),
			      .notEmpty(flitBuffers$notEmpty),
			      .notFull(flitBuffers$notFull));

  // submodule flitBuffers_1
  mkInputVCQueues flitBuffers_1(.CLK(CLK),
				.RST_N(RST_N),
				.deq_fifo_out(flitBuffers_1$deq_fifo_out),
				.enq_data_in(flitBuffers_1$enq_data_in),
				.enq_fifo_in(flitBuffers_1$enq_fifo_in),
				.EN_enq(flitBuffers_1$EN_enq),
				.EN_deq(flitBuffers_1$EN_deq),
				.deq(flitBuffers_1$deq),
				.notEmpty(flitBuffers_1$notEmpty),
				.notFull(flitBuffers_1$notFull));

  // submodule flitBuffers_2
  mkInputVCQueues flitBuffers_2(.CLK(CLK),
				.RST_N(RST_N),
				.deq_fifo_out(flitBuffers_2$deq_fifo_out),
				.enq_data_in(flitBuffers_2$enq_data_in),
				.enq_fifo_in(flitBuffers_2$enq_fifo_in),
				.EN_enq(flitBuffers_2$EN_enq),
				.EN_deq(flitBuffers_2$EN_deq),
				.deq(flitBuffers_2$deq),
				.notEmpty(flitBuffers_2$notEmpty),
				.notFull(flitBuffers_2$notFull));

  // submodule outPortFIFOs_0
  mkOutPortFIFO outPortFIFOs_0(.CLK(CLK),
			       .RST_N(RST_N),
			       .enq_sendData(outPortFIFOs_0$enq_sendData),
			       .EN_enq(outPortFIFOs_0$EN_enq),
			       .EN_deq(outPortFIFOs_0$EN_deq),
			       .EN_clear(outPortFIFOs_0$EN_clear),
			       .RDY_enq(),
			       .RDY_deq(),
			       .first(outPortFIFOs_0$first),
			       .RDY_first(),
			       .notFull(),
			       .RDY_notFull(),
			       .notEmpty(),
			       .RDY_notEmpty(),
			       .count(),
			       .RDY_count(),
			       .RDY_clear());

  // submodule outPortFIFOs_0_1
  mkOutPortFIFO outPortFIFOs_0_1(.CLK(CLK),
				 .RST_N(RST_N),
				 .enq_sendData(outPortFIFOs_0_1$enq_sendData),
				 .EN_enq(outPortFIFOs_0_1$EN_enq),
				 .EN_deq(outPortFIFOs_0_1$EN_deq),
				 .EN_clear(outPortFIFOs_0_1$EN_clear),
				 .RDY_enq(),
				 .RDY_deq(),
				 .first(outPortFIFOs_0_1$first),
				 .RDY_first(),
				 .notFull(),
				 .RDY_notFull(),
				 .notEmpty(),
				 .RDY_notEmpty(),
				 .count(),
				 .RDY_count(),
				 .RDY_clear());

  // submodule outPortFIFOs_1
  mkOutPortFIFO outPortFIFOs_1(.CLK(CLK),
			       .RST_N(RST_N),
			       .enq_sendData(outPortFIFOs_1$enq_sendData),
			       .EN_enq(outPortFIFOs_1$EN_enq),
			       .EN_deq(outPortFIFOs_1$EN_deq),
			       .EN_clear(outPortFIFOs_1$EN_clear),
			       .RDY_enq(),
			       .RDY_deq(),
			       .first(outPortFIFOs_1$first),
			       .RDY_first(),
			       .notFull(),
			       .RDY_notFull(),
			       .notEmpty(),
			       .RDY_notEmpty(),
			       .count(),
			       .RDY_count(),
			       .RDY_clear());

  // submodule outPortFIFOs_1_1
  mkOutPortFIFO outPortFIFOs_1_1(.CLK(CLK),
				 .RST_N(RST_N),
				 .enq_sendData(outPortFIFOs_1_1$enq_sendData),
				 .EN_enq(outPortFIFOs_1_1$EN_enq),
				 .EN_deq(outPortFIFOs_1_1$EN_deq),
				 .EN_clear(outPortFIFOs_1_1$EN_clear),
				 .RDY_enq(),
				 .RDY_deq(),
				 .first(outPortFIFOs_1_1$first),
				 .RDY_first(),
				 .notFull(),
				 .RDY_notFull(),
				 .notEmpty(),
				 .RDY_notEmpty(),
				 .count(),
				 .RDY_count(),
				 .RDY_clear());

  // submodule outPortFIFOs_2
  mkOutPortFIFO outPortFIFOs_2(.CLK(CLK),
			       .RST_N(RST_N),
			       .enq_sendData(outPortFIFOs_2$enq_sendData),
			       .EN_enq(outPortFIFOs_2$EN_enq),
			       .EN_deq(outPortFIFOs_2$EN_deq),
			       .EN_clear(outPortFIFOs_2$EN_clear),
			       .RDY_enq(),
			       .RDY_deq(),
			       .first(outPortFIFOs_2$first),
			       .RDY_first(),
			       .notFull(),
			       .RDY_notFull(),
			       .notEmpty(),
			       .RDY_notEmpty(),
			       .count(),
			       .RDY_count(),
			       .RDY_clear());

  // submodule outPortFIFOs_2_1
  mkOutPortFIFO outPortFIFOs_2_1(.CLK(CLK),
				 .RST_N(RST_N),
				 .enq_sendData(outPortFIFOs_2_1$enq_sendData),
				 .EN_enq(outPortFIFOs_2_1$EN_enq),
				 .EN_deq(outPortFIFOs_2_1$EN_deq),
				 .EN_clear(outPortFIFOs_2_1$EN_clear),
				 .RDY_enq(),
				 .RDY_deq(),
				 .first(outPortFIFOs_2_1$first),
				 .RDY_first(),
				 .notFull(),
				 .RDY_notFull(),
				 .notEmpty(),
				 .RDY_notEmpty(),
				 .count(),
				 .RDY_count(),
				 .RDY_clear());

  // submodule routerAlloc
  mkSepRouterAllocator routerAlloc(.pipeline(1'd0),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .allocate_alloc_input(routerAlloc$allocate_alloc_input),
				   .EN_allocate(routerAlloc$EN_allocate),
				   .EN_next(routerAlloc$EN_next),
				   .allocate(routerAlloc$allocate));

  // inlined wires
  assign hasFlitsToSend_perIn$wget = { 1'd1, flitBuffers$deq } ;
  assign hasFlitsToSend_perIn_1$wget = { 1'd1, flitBuffers_1$deq } ;
  assign hasFlitsToSend_perIn_2$wget = { 1'd1, flitBuffers_2$deq } ;

  // register activeVC_perIn_reg
  assign activeVC_perIn_reg$D_IN = 2'h0 ;
  assign activeVC_perIn_reg$EN = 1'b0 ;

  // register activeVC_perIn_reg_1
  assign activeVC_perIn_reg_1$D_IN = 2'h0 ;
  assign activeVC_perIn_reg_1$EN = 1'b0 ;

  // register activeVC_perIn_reg_2
  assign activeVC_perIn_reg_2$D_IN = 2'h0 ;
  assign activeVC_perIn_reg_2$EN = 1'b0 ;

  // register inPortVL_0
  assign inPortVL_0$D_IN = 2'h0 ;
  assign inPortVL_0$EN = 1'b0 ;

  // register inPortVL_0_1
  assign inPortVL_0_1$D_IN = 2'h0 ;
  assign inPortVL_0_1$EN = 1'b0 ;

  // register inPortVL_1
  assign inPortVL_1$D_IN = 2'h0 ;
  assign inPortVL_1$EN = 1'b0 ;

  // register inPortVL_1_1
  assign inPortVL_1_1$D_IN = 2'h0 ;
  assign inPortVL_1_1$EN = 1'b0 ;

  // register inPortVL_2
  assign inPortVL_2$D_IN = 2'h0 ;
  assign inPortVL_2$EN = 1'b0 ;

  // register inPortVL_2_1
  assign inPortVL_2_1$D_IN = 2'h0 ;
  assign inPortVL_2_1$EN = 1'b0 ;

  // register lockedVL_0
  assign lockedVL_0$D_IN = 1'b0 ;
  assign lockedVL_0$EN = 1'b0 ;

  // register lockedVL_0_1
  assign lockedVL_0_1$D_IN = 1'b0 ;
  assign lockedVL_0_1$EN = 1'b0 ;

  // register lockedVL_1
  assign lockedVL_1$D_IN = 1'b0 ;
  assign lockedVL_1$EN = 1'b0 ;

  // register lockedVL_1_1
  assign lockedVL_1_1$D_IN = 1'b0 ;
  assign lockedVL_1_1$EN = 1'b0 ;

  // register lockedVL_2
  assign lockedVL_2$D_IN = 1'b0 ;
  assign lockedVL_2$EN = 1'b0 ;

  // register lockedVL_2_1
  assign lockedVL_2_1$D_IN = 1'b0 ;
  assign lockedVL_2_1$EN = 1'b0 ;

  // register selectedIO_reg_0
  assign selectedIO_reg_0$D_IN = 1'b0 ;
  assign selectedIO_reg_0$EN = 1'b0 ;

  // register selectedIO_reg_0_1
  assign selectedIO_reg_0_1$D_IN = 1'b0 ;
  assign selectedIO_reg_0_1$EN = 1'b0 ;

  // register selectedIO_reg_0_2
  assign selectedIO_reg_0_2$D_IN = 1'b0 ;
  assign selectedIO_reg_0_2$EN = 1'b0 ;

  // register selectedIO_reg_1
  assign selectedIO_reg_1$D_IN = 1'b0 ;
  assign selectedIO_reg_1$EN = 1'b0 ;

  // register selectedIO_reg_1_1
  assign selectedIO_reg_1_1$D_IN = 1'b0 ;
  assign selectedIO_reg_1_1$EN = 1'b0 ;

  // register selectedIO_reg_1_2
  assign selectedIO_reg_1_2$D_IN = 1'b0 ;
  assign selectedIO_reg_1_2$EN = 1'b0 ;

  // register selectedIO_reg_2
  assign selectedIO_reg_2$D_IN = 1'b0 ;
  assign selectedIO_reg_2$EN = 1'b0 ;

  // register selectedIO_reg_2_1
  assign selectedIO_reg_2_1$D_IN = 1'b0 ;
  assign selectedIO_reg_2_1$EN = 1'b0 ;

  // register selectedIO_reg_2_2
  assign selectedIO_reg_2_2$D_IN = 1'b0 ;
  assign selectedIO_reg_2_2$EN = 1'b0 ;

  // submodule flitBuffers
  assign flitBuffers$deq_fifo_out =
	     !flitBuffers$notEmpty[0] ||
	     IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_NOT_sim_ETC___d136 ;
  assign flitBuffers$enq_data_in = in_ports_0_putRoutedFlit_flit_in[16:2] ;
  assign flitBuffers$enq_fifo_in = in_ports_0_putRoutedFlit_flit_in[12] ;
  assign flitBuffers$EN_enq =
	     EN_in_ports_0_putRoutedFlit &&
	     in_ports_0_putRoutedFlit_flit_in[17] ;
  assign flitBuffers$EN_deq = outport_encoder___d499[2] ;

  // submodule flitBuffers_1
  assign flitBuffers_1$deq_fifo_out =
	     !flitBuffers_1$notEmpty[0] ||
	     IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_NOT_sim_ETC___d162 ;
  assign flitBuffers_1$enq_data_in = in_ports_1_putRoutedFlit_flit_in[16:2] ;
  assign flitBuffers_1$enq_fifo_in = in_ports_1_putRoutedFlit_flit_in[12] ;
  assign flitBuffers_1$EN_enq =
	     EN_in_ports_1_putRoutedFlit &&
	     in_ports_1_putRoutedFlit_flit_in[17] ;
  assign flitBuffers_1$EN_deq = outport_encoder___d498[2] ;

  // submodule flitBuffers_2
  assign flitBuffers_2$deq_fifo_out =
	     !flitBuffers_2$notEmpty[0] ||
	     IF_outPortFIFOs_2_first_EQ_0_THEN_NOT_simple_c_ETC___d188 ;
  assign flitBuffers_2$enq_data_in = in_ports_2_putRoutedFlit_flit_in[16:2] ;
  assign flitBuffers_2$enq_fifo_in = in_ports_2_putRoutedFlit_flit_in[12] ;
  assign flitBuffers_2$EN_enq =
	     EN_in_ports_2_putRoutedFlit &&
	     in_ports_2_putRoutedFlit_flit_in[17] ;
  assign flitBuffers_2$EN_deq = outport_encoder___d497[2] ;

  // submodule outPortFIFOs_0
  assign outPortFIFOs_0$enq_sendData = in_ports_0_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_0$EN_enq =
	     EN_in_ports_0_putRoutedFlit &&
	     in_ports_0_putRoutedFlit_flit_in[17] &&
	     !in_ports_0_putRoutedFlit_flit_in[12] ;
  assign outPortFIFOs_0$EN_deq =
	     outport_encoder___d499[2] && flitBuffers$notEmpty[0] &&
	     IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simple__ETC___d427 ;
  assign outPortFIFOs_0$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_0_1
  assign outPortFIFOs_0_1$enq_sendData =
	     in_ports_0_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_0_1$EN_enq =
	     EN_in_ports_0_putRoutedFlit &&
	     in_ports_0_putRoutedFlit_flit_in[17] &&
	     in_ports_0_putRoutedFlit_flit_in[12] ;
  assign outPortFIFOs_0_1$EN_deq =
	     outport_encoder___d499[2] && fifo_out__h17848 ;
  assign outPortFIFOs_0_1$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_1
  assign outPortFIFOs_1$enq_sendData = in_ports_1_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_1$EN_enq =
	     EN_in_ports_1_putRoutedFlit &&
	     in_ports_1_putRoutedFlit_flit_in[17] &&
	     !in_ports_1_putRoutedFlit_flit_in[12] ;
  assign outPortFIFOs_1$EN_deq =
	     outport_encoder___d498[2] && flitBuffers_1$notEmpty[0] &&
	     IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simple__ETC___d425 ;
  assign outPortFIFOs_1$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_1_1
  assign outPortFIFOs_1_1$enq_sendData =
	     in_ports_1_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_1_1$EN_enq =
	     EN_in_ports_1_putRoutedFlit &&
	     in_ports_1_putRoutedFlit_flit_in[17] &&
	     in_ports_1_putRoutedFlit_flit_in[12] ;
  assign outPortFIFOs_1_1$EN_deq =
	     outport_encoder___d498[2] && fifo_out__h18805 ;
  assign outPortFIFOs_1_1$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_2
  assign outPortFIFOs_2$enq_sendData = in_ports_2_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_2$EN_enq =
	     EN_in_ports_2_putRoutedFlit &&
	     in_ports_2_putRoutedFlit_flit_in[17] &&
	     !in_ports_2_putRoutedFlit_flit_in[12] ;
  assign outPortFIFOs_2$EN_deq =
	     outport_encoder___d497[2] && flitBuffers_2$notEmpty[0] &&
	     IF_outPortFIFOs_2_first_EQ_0_THEN_simple_credi_ETC___d423 ;
  assign outPortFIFOs_2$EN_clear = 1'b0 ;

  // submodule outPortFIFOs_2_1
  assign outPortFIFOs_2_1$enq_sendData =
	     in_ports_2_putRoutedFlit_flit_in[1:0] ;
  assign outPortFIFOs_2_1$EN_enq =
	     EN_in_ports_2_putRoutedFlit &&
	     in_ports_2_putRoutedFlit_flit_in[17] &&
	     in_ports_2_putRoutedFlit_flit_in[12] ;
  assign outPortFIFOs_2_1$EN_deq =
	     outport_encoder___d497[2] && fifo_out__h19351 ;
  assign outPortFIFOs_2_1$EN_clear = 1'b0 ;

  // submodule routerAlloc
  assign routerAlloc$allocate_alloc_input =
	     { IF_flitBuffers_2_notEmpty_BIT_0_THEN_IF_IF_out_ETC___d45,
	       IF_flitBuffers_1_notEmpty__6_BIT_0_7_THEN_IF_I_ETC___d72,
	       IF_flitBuffers_notEmpty__3_BIT_0_4_THEN_IF_IF__ETC___d99 } ;
  assign routerAlloc$EN_allocate = 1'd1 ;
  assign routerAlloc$EN_next = 1'd1 ;

  // remaining internal signals
  module_outport_encoder instance_outport_encoder_1(.outport_encoder_vec({ 1'd1 &&
									   routerAlloc$allocate[2],
									   1'd1 &&
									   routerAlloc$allocate[1],
									   1'd1 &&
									   routerAlloc$allocate[0] }),
						    .outport_encoder(outport_encoder___d499));
  module_outport_encoder instance_outport_encoder_0(.outport_encoder_vec({ 1'd1 &&
									   routerAlloc$allocate[5],
									   1'd1 &&
									   routerAlloc$allocate[4],
									   1'd1 &&
									   routerAlloc$allocate[3] }),
						    .outport_encoder(outport_encoder___d498));
  module_outport_encoder instance_outport_encoder_2(.outport_encoder_vec({ 1'd1 &&
									   routerAlloc$allocate[8],
									   1'd1 &&
									   routerAlloc$allocate[7],
									   1'd1 &&
									   routerAlloc$allocate[6] }),
						    .outport_encoder(outport_encoder___d497));
  assign IF_IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simp_ETC___d98 =
	     IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simple__ETC___d427 ?
	       { outPortFIFOs_0$first == 2'd2,
		 outPortFIFOs_0$first == 2'd1,
		 outPortFIFOs_0$first == 2'd0 } :
	       { flitBuffers$notEmpty[1] &&
		 IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 &&
		 outPortFIFOs_0_1$first == 2'd2,
		 flitBuffers$notEmpty[1] &&
		 IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 &&
		 outPortFIFOs_0_1$first == 2'd1,
		 flitBuffers$notEmpty[1] &&
		 IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 &&
		 outPortFIFOs_0_1$first == 2'd0 } ;
  assign IF_IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simp_ETC___d71 =
	     IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simple__ETC___d425 ?
	       { outPortFIFOs_1$first == 2'd2,
		 outPortFIFOs_1$first == 2'd1,
		 outPortFIFOs_1$first == 2'd0 } :
	       { flitBuffers_1$notEmpty[1] &&
		 IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 &&
		 outPortFIFOs_1_1$first == 2'd2,
		 flitBuffers_1$notEmpty[1] &&
		 IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 &&
		 outPortFIFOs_1_1$first == 2'd1,
		 flitBuffers_1$notEmpty[1] &&
		 IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 &&
		 outPortFIFOs_1_1$first == 2'd0 } ;
  assign IF_IF_outPortFIFOs_2_first_EQ_0_THEN_simple_cr_ETC___d44 =
	     IF_outPortFIFOs_2_first_EQ_0_THEN_simple_credi_ETC___d423 ?
	       { outPortFIFOs_2$first == 2'd2,
		 outPortFIFOs_2$first == 2'd1,
		 outPortFIFOs_2$first == 2'd0 } :
	       { flitBuffers_2$notEmpty[1] &&
		 IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 &&
		 outPortFIFOs_2_1$first == 2'd2,
		 flitBuffers_2$notEmpty[1] &&
		 IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 &&
		 outPortFIFOs_2_1$first == 2'd1,
		 flitBuffers_2$notEmpty[1] &&
		 IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 &&
		 outPortFIFOs_2_1$first == 2'd0 } ;
  assign IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d268 =
	     IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d487 ?
	       !outport_encoder___d498[2] ||
	       !hasFlitsToSend_perIn_1$wget[15] :
	       outport_encoder___d497[2] &&
	       outport_encoder___d497[1:0] == 2'd0 &&
	       !hasFlitsToSend_perIn_2$wget[15] ;
  assign IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d277 =
	     IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d487 ?
	       outport_encoder___d498[2] && hasFlitsToSend_perIn_1$wget[15] :
	       !outport_encoder___d497[2] ||
	       outport_encoder___d497[1:0] != 2'd0 ||
	       hasFlitsToSend_perIn_2$wget[15] ;
  assign IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d278 =
	     IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d469 ?
	       outport_encoder___d499[2] && hasFlitsToSend_perIn$wget[15] :
	       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d277 ;
  assign IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d506 =
	     IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d469 ?
	       hasFlitsToSend_perIn$wget[14:0] :
	       (IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d487 ?
		  hasFlitsToSend_perIn_1$wget[14:0] :
		  hasFlitsToSend_perIn_2$wget[14:0]) ;
  assign IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d512 =
	     IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d469 ?
	       !outport_encoder___d499[2] || !hasFlitsToSend_perIn$wget[15] :
	       IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d268 ;
  assign IF_flitBuffers_1_notEmpty__6_BIT_0_7_THEN_IF_I_ETC___d72 =
	     flitBuffers_1$notEmpty[0] ?
	       IF_IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simp_ETC___d71 :
	       { flitBuffers_1$notEmpty[1] &&
		 IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 &&
		 outPortFIFOs_1_1$first == 2'd2,
		 flitBuffers_1$notEmpty[1] &&
		 IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 &&
		 outPortFIFOs_1_1$first == 2'd1,
		 flitBuffers_1$notEmpty[1] &&
		 IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 &&
		 outPortFIFOs_1_1$first == 2'd0 } ;
  assign IF_flitBuffers_2_notEmpty_BIT_0_THEN_IF_IF_out_ETC___d45 =
	     flitBuffers_2$notEmpty[0] ?
	       IF_IF_outPortFIFOs_2_first_EQ_0_THEN_simple_cr_ETC___d44 :
	       { flitBuffers_2$notEmpty[1] &&
		 IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 &&
		 outPortFIFOs_2_1$first == 2'd2,
		 flitBuffers_2$notEmpty[1] &&
		 IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 &&
		 outPortFIFOs_2_1$first == 2'd1,
		 flitBuffers_2$notEmpty[1] &&
		 IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 &&
		 outPortFIFOs_2_1$first == 2'd0 } ;
  assign IF_flitBuffers_notEmpty__3_BIT_0_4_THEN_IF_IF__ETC___d99 =
	     flitBuffers$notEmpty[0] ?
	       IF_IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simp_ETC___d98 :
	       { flitBuffers$notEmpty[1] &&
		 IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 &&
		 outPortFIFOs_0_1$first == 2'd2,
		 flitBuffers$notEmpty[1] &&
		 IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 &&
		 outPortFIFOs_0_1$first == 2'd1,
		 flitBuffers$notEmpty[1] &&
		 IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 &&
		 outPortFIFOs_0_1$first == 2'd0 } ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d408 =
	     outport_encoder___d498[2] ?
	       ((outport_encoder___d498[1:0] == 2'd1) ?
		  outport_encoder___d498[1:0] :
		  2'd0) :
	       2'd0 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d409 =
	     outport_encoder___d498[2] ?
	       ((outport_encoder___d498[1:0] == 2'd2) ? 2'd1 : 2'd0) :
	       2'd0 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d491 =
	     outport_encoder___d498[2] ?
	       outport_encoder___d498[1:0] != 2'd0 &&
	       (!outport_encoder___d499[2] ||
		outport_encoder___d499[1:0] != 2'd0) :
	       !outport_encoder___d499[2] ||
	       outport_encoder___d499[1:0] != 2'd0 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d492 =
	     outport_encoder___d498[2] ?
	       outport_encoder___d498[1:0] != 2'd1 &&
	       (!outport_encoder___d499[2] ||
		outport_encoder___d499[1:0] != 2'd1) :
	       !outport_encoder___d499[2] ||
	       outport_encoder___d499[1:0] != 2'd1 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d493 =
	     outport_encoder___d498[2] ?
	       outport_encoder___d498[1:0] != 2'd2 &&
	       (!outport_encoder___d499[2] ||
		outport_encoder___d499[1:0] != 2'd2) :
	       !outport_encoder___d499[2] ||
	       outport_encoder___d499[1:0] != 2'd2 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d395 =
	     outport_encoder___d498[2] ?
	       outport_encoder___d498[1:0] == 2'd0 ||
	       outport_encoder___d499[2] &&
	       outport_encoder___d499[1:0] == 2'd0 :
	       outport_encoder___d499[2] &&
	       outport_encoder___d499[1:0] == 2'd0 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d399 =
	     outport_encoder___d498[2] ?
	       outport_encoder___d498[1:0] == 2'd1 ||
	       outport_encoder___d499[2] &&
	       outport_encoder___d499[1:0] == 2'd1 :
	       outport_encoder___d499[2] &&
	       outport_encoder___d499[1:0] == 2'd1 ;
  assign IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d407 =
	     outport_encoder___d498[2] ?
	       outport_encoder___d498[1:0] == 2'd2 ||
	       outport_encoder___d499[2] &&
	       outport_encoder___d499[1:0] == 2'd2 :
	       outport_encoder___d499[2] &&
	       outport_encoder___d499[1:0] == 2'd2 ;
  assign IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d469 =
	     outport_encoder___d497[2] ?
	       outport_encoder___d497[1:0] != 2'd0 &&
	       (!outport_encoder___d498[2] ||
		outport_encoder___d498[1:0] != 2'd0) :
	       !outport_encoder___d498[2] ||
	       outport_encoder___d498[1:0] != 2'd0 ;
  assign IF_outport_encoder_83_BIT_2_84_THEN_NOT_outpor_ETC___d487 =
	     outport_encoder___d497[2] ?
	       outport_encoder___d497[1:0] != 2'd0 &&
	       outport_encoder___d498[2] &&
	       outport_encoder___d498[1:0] == 2'd0 :
	       outport_encoder___d498[2] &&
	       outport_encoder___d498[1:0] == 2'd0 ;
  assign IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 =
	     outport_encoder___d497[2] ?
	       outport_encoder___d497[1:0] == 2'd0 ||
	       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d395 :
	       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d395 ;
  assign IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 =
	     outport_encoder___d497[2] ?
	       outport_encoder___d497[1:0] == 2'd1 ||
	       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d399 :
	       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d399 ;
  assign IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 =
	     outport_encoder___d497[2] ?
	       outport_encoder___d497[1:0] == 2'd2 ||
	       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d407 :
	       IF_outport_encoder_57_BIT_2_58_THEN_outport_en_ETC___d407 ;
  assign active_in__h25578 =
	     outport_encoder___d497[2] ?
	       ((outport_encoder___d497[1:0] == 2'd1) ?
		  2'd2 :
		  IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d408) :
	       IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d408 ;
  assign active_in__h26933 =
	     outport_encoder___d497[2] ?
	       ((outport_encoder___d497[1:0] == 2'd2) ?
		  outport_encoder___d497[1:0] :
		  IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d409) :
	       IF_outport_encoder_57_BIT_2_58_THEN_IF_outport_ETC___d409 ;
  assign fifo_out__h17848 =
	     !flitBuffers$notEmpty[0] ||
	     IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_NOT_sim_ETC___d136 ;
  assign fifo_out__h18805 =
	     !flitBuffers_1$notEmpty[0] ||
	     IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_NOT_sim_ETC___d162 ;
  assign fifo_out__h19351 =
	     !flitBuffers_2$notEmpty[0] ||
	     IF_outPortFIFOs_2_first_EQ_0_THEN_NOT_simple_c_ETC___d188 ;
  always@(outPortFIFOs_0$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_0$first)
      2'd0:
	  IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_NOT_sim_ETC___d136 =
	      !EN_out_ports_0_putNonFullVCs ||
	      !out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_NOT_sim_ETC___d136 =
	      !EN_out_ports_1_putNonFullVCs ||
	      !out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2, 2'd3:
	  IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_NOT_sim_ETC___d136 =
	      !EN_out_ports_2_putNonFullVCs ||
	      !out_ports_2_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_1$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_1$first)
      2'd0:
	  IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_NOT_sim_ETC___d162 =
	      !EN_out_ports_0_putNonFullVCs ||
	      !out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_NOT_sim_ETC___d162 =
	      !EN_out_ports_1_putNonFullVCs ||
	      !out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2, 2'd3:
	  IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_NOT_sim_ETC___d162 =
	      !EN_out_ports_2_putNonFullVCs ||
	      !out_ports_2_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_2$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_2$first)
      2'd0:
	  IF_outPortFIFOs_2_first_EQ_0_THEN_NOT_simple_c_ETC___d188 =
	      !EN_out_ports_0_putNonFullVCs ||
	      !out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_2_first_EQ_0_THEN_NOT_simple_c_ETC___d188 =
	      !EN_out_ports_1_putNonFullVCs ||
	      !out_ports_1_putNonFullVCs_nonFullVCs[0];
      2'd2, 2'd3:
	  IF_outPortFIFOs_2_first_EQ_0_THEN_NOT_simple_c_ETC___d188 =
	      !EN_out_ports_2_putNonFullVCs ||
	      !out_ports_2_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_2_1$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_2_1$first)
      2'd0:
	  IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[1];
      2'd1:
	  IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[1];
      default: IF_outPortFIFOs_2_1_first__1_EQ_0_2_THEN_simpl_ETC___d449 =
		   EN_out_ports_2_putNonFullVCs &&
		   out_ports_2_putNonFullVCs_nonFullVCs[1];
    endcase
  end
  always@(outPortFIFOs_2$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_2$first)
      2'd0:
	  IF_outPortFIFOs_2_first_EQ_0_THEN_simple_credi_ETC___d423 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_2_first_EQ_0_THEN_simple_credi_ETC___d423 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      default: IF_outPortFIFOs_2_first_EQ_0_THEN_simple_credi_ETC___d423 =
		   EN_out_ports_2_putNonFullVCs &&
		   out_ports_2_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_1_1$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_1_1$first)
      2'd0:
	  IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[1];
      2'd1:
	  IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[1];
      default: IF_outPortFIFOs_1_1_first__7_EQ_0_8_THEN_simpl_ETC___d454 =
		   EN_out_ports_2_putNonFullVCs &&
		   out_ports_2_putNonFullVCs_nonFullVCs[1];
    endcase
  end
  always@(outPortFIFOs_1$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_1$first)
      2'd0:
	  IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simple__ETC___d425 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simple__ETC___d425 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      default: IF_outPortFIFOs_1_first__8_EQ_0_9_THEN_simple__ETC___d425 =
		   EN_out_ports_2_putNonFullVCs &&
		   out_ports_2_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(outPortFIFOs_0_1$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_0_1$first)
      2'd0:
	  IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[1];
      2'd1:
	  IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[1];
      default: IF_outPortFIFOs_0_1_first__4_EQ_0_5_THEN_simpl_ETC___d459 =
		   EN_out_ports_2_putNonFullVCs &&
		   out_ports_2_putNonFullVCs_nonFullVCs[1];
    endcase
  end
  always@(outPortFIFOs_0$first or
	  EN_out_ports_2_putNonFullVCs or
	  out_ports_2_putNonFullVCs_nonFullVCs or
	  EN_out_ports_0_putNonFullVCs or
	  out_ports_0_putNonFullVCs_nonFullVCs or
	  EN_out_ports_1_putNonFullVCs or
	  out_ports_1_putNonFullVCs_nonFullVCs)
  begin
    case (outPortFIFOs_0$first)
      2'd0:
	  IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simple__ETC___d427 =
	      EN_out_ports_0_putNonFullVCs &&
	      out_ports_0_putNonFullVCs_nonFullVCs[0];
      2'd1:
	  IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simple__ETC___d427 =
	      EN_out_ports_1_putNonFullVCs &&
	      out_ports_1_putNonFullVCs_nonFullVCs[0];
      default: IF_outPortFIFOs_0_first__5_EQ_0_6_THEN_simple__ETC___d427 =
		   EN_out_ports_2_putNonFullVCs &&
		   out_ports_2_putNonFullVCs_nonFullVCs[0];
    endcase
  end
  always@(active_in__h25578 or
	  outport_encoder___d497 or
	  hasFlitsToSend_perIn_2$wget or
	  outport_encoder___d499 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d498 or hasFlitsToSend_perIn_1$wget)
  begin
    case (active_in__h25578)
      2'd0:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d327 =
	      outport_encoder___d499[2] && hasFlitsToSend_perIn$wget[15];
      2'd1:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d327 =
	      outport_encoder___d498[2] && hasFlitsToSend_perIn_1$wget[15];
      default: IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d327 =
		   active_in__h25578 != 2'd2 ||
		   outport_encoder___d497[2] &&
		   hasFlitsToSend_perIn_2$wget[15];
    endcase
  end
  always@(active_in__h26933 or
	  outport_encoder___d497 or
	  hasFlitsToSend_perIn_2$wget or
	  outport_encoder___d499 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d498 or hasFlitsToSend_perIn_1$wget)
  begin
    case (active_in__h26933)
      2'd0:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d367 =
	      outport_encoder___d499[2] && hasFlitsToSend_perIn$wget[15];
      2'd1:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d367 =
	      outport_encoder___d498[2] && hasFlitsToSend_perIn_1$wget[15];
      default: IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d367 =
		   active_in__h26933 != 2'd2 ||
		   outport_encoder___d497[2] &&
		   hasFlitsToSend_perIn_2$wget[15];
    endcase
  end
  always@(active_in__h25578 or
	  hasFlitsToSend_perIn_2$wget or
	  hasFlitsToSend_perIn$wget or hasFlitsToSend_perIn_1$wget)
  begin
    case (active_in__h25578)
      2'd0:
	  CASE_active_in5578_hasFlitsToSend_perIn_2wget_ETC__q1 =
	      hasFlitsToSend_perIn$wget[14:0];
      2'd1:
	  CASE_active_in5578_hasFlitsToSend_perIn_2wget_ETC__q1 =
	      hasFlitsToSend_perIn_1$wget[14:0];
      2'd2, 2'd3:
	  CASE_active_in5578_hasFlitsToSend_perIn_2wget_ETC__q1 =
	      hasFlitsToSend_perIn_2$wget[14:0];
    endcase
  end
  always@(active_in__h25578 or
	  outport_encoder___d497 or
	  hasFlitsToSend_perIn_2$wget or
	  outport_encoder___d499 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d498 or hasFlitsToSend_perIn_1$wget)
  begin
    case (active_in__h25578)
      2'd0:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513 =
	      !outport_encoder___d499[2] || !hasFlitsToSend_perIn$wget[15];
      2'd1:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513 =
	      !outport_encoder___d498[2] || !hasFlitsToSend_perIn_1$wget[15];
      default: IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513 =
		   active_in__h25578 == 2'd2 &&
		   (!outport_encoder___d497[2] ||
		    !hasFlitsToSend_perIn_2$wget[15]);
    endcase
  end
  always@(active_in__h26933 or
	  hasFlitsToSend_perIn_2$wget or
	  hasFlitsToSend_perIn$wget or hasFlitsToSend_perIn_1$wget)
  begin
    case (active_in__h26933)
      2'd0:
	  CASE_active_in6933_hasFlitsToSend_perIn_2wget_ETC__q2 =
	      hasFlitsToSend_perIn$wget[14:0];
      2'd1:
	  CASE_active_in6933_hasFlitsToSend_perIn_2wget_ETC__q2 =
	      hasFlitsToSend_perIn_1$wget[14:0];
      2'd2, 2'd3:
	  CASE_active_in6933_hasFlitsToSend_perIn_2wget_ETC__q2 =
	      hasFlitsToSend_perIn_2$wget[14:0];
    endcase
  end
  always@(active_in__h26933 or
	  outport_encoder___d497 or
	  hasFlitsToSend_perIn_2$wget or
	  outport_encoder___d499 or
	  hasFlitsToSend_perIn$wget or
	  outport_encoder___d498 or hasFlitsToSend_perIn_1$wget)
  begin
    case (active_in__h26933)
      2'd0:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514 =
	      !outport_encoder___d499[2] || !hasFlitsToSend_perIn$wget[15];
      2'd1:
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514 =
	      !outport_encoder___d498[2] || !hasFlitsToSend_perIn_1$wget[15];
      default: IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514 =
		   active_in__h26933 == 2'd2 &&
		   (!outport_encoder___d497[2] ||
		    !hasFlitsToSend_perIn_2$wget[15]);
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        activeVC_perIn_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	activeVC_perIn_reg_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	activeVC_perIn_reg_2 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	inPortVL_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_0_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_1_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inPortVL_2_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lockedVL_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lockedVL_2_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_0_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selectedIO_reg_2_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (activeVC_perIn_reg$EN)
	  activeVC_perIn_reg <= `BSV_ASSIGNMENT_DELAY activeVC_perIn_reg$D_IN;
	if (activeVC_perIn_reg_1$EN)
	  activeVC_perIn_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      activeVC_perIn_reg_1$D_IN;
	if (activeVC_perIn_reg_2$EN)
	  activeVC_perIn_reg_2 <= `BSV_ASSIGNMENT_DELAY
	      activeVC_perIn_reg_2$D_IN;
	if (inPortVL_0$EN)
	  inPortVL_0 <= `BSV_ASSIGNMENT_DELAY inPortVL_0$D_IN;
	if (inPortVL_0_1$EN)
	  inPortVL_0_1 <= `BSV_ASSIGNMENT_DELAY inPortVL_0_1$D_IN;
	if (inPortVL_1$EN)
	  inPortVL_1 <= `BSV_ASSIGNMENT_DELAY inPortVL_1$D_IN;
	if (inPortVL_1_1$EN)
	  inPortVL_1_1 <= `BSV_ASSIGNMENT_DELAY inPortVL_1_1$D_IN;
	if (inPortVL_2$EN)
	  inPortVL_2 <= `BSV_ASSIGNMENT_DELAY inPortVL_2$D_IN;
	if (inPortVL_2_1$EN)
	  inPortVL_2_1 <= `BSV_ASSIGNMENT_DELAY inPortVL_2_1$D_IN;
	if (lockedVL_0$EN)
	  lockedVL_0 <= `BSV_ASSIGNMENT_DELAY lockedVL_0$D_IN;
	if (lockedVL_0_1$EN)
	  lockedVL_0_1 <= `BSV_ASSIGNMENT_DELAY lockedVL_0_1$D_IN;
	if (lockedVL_1$EN)
	  lockedVL_1 <= `BSV_ASSIGNMENT_DELAY lockedVL_1$D_IN;
	if (lockedVL_1_1$EN)
	  lockedVL_1_1 <= `BSV_ASSIGNMENT_DELAY lockedVL_1_1$D_IN;
	if (lockedVL_2$EN)
	  lockedVL_2 <= `BSV_ASSIGNMENT_DELAY lockedVL_2$D_IN;
	if (lockedVL_2_1$EN)
	  lockedVL_2_1 <= `BSV_ASSIGNMENT_DELAY lockedVL_2_1$D_IN;
	if (selectedIO_reg_0$EN)
	  selectedIO_reg_0 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0$D_IN;
	if (selectedIO_reg_0_1$EN)
	  selectedIO_reg_0_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0_1$D_IN;
	if (selectedIO_reg_0_2$EN)
	  selectedIO_reg_0_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_0_2$D_IN;
	if (selectedIO_reg_1$EN)
	  selectedIO_reg_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1$D_IN;
	if (selectedIO_reg_1_1$EN)
	  selectedIO_reg_1_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1_1$D_IN;
	if (selectedIO_reg_1_2$EN)
	  selectedIO_reg_1_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_1_2$D_IN;
	if (selectedIO_reg_2$EN)
	  selectedIO_reg_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2$D_IN;
	if (selectedIO_reg_2_1$EN)
	  selectedIO_reg_2_1 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2_1$D_IN;
	if (selectedIO_reg_2_2$EN)
	  selectedIO_reg_2_2 <= `BSV_ASSIGNMENT_DELAY selectedIO_reg_2_2$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    activeVC_perIn_reg = 2'h2;
    activeVC_perIn_reg_1 = 2'h2;
    activeVC_perIn_reg_2 = 2'h2;
    inPortVL_0 = 2'h2;
    inPortVL_0_1 = 2'h2;
    inPortVL_1 = 2'h2;
    inPortVL_1_1 = 2'h2;
    inPortVL_2 = 2'h2;
    inPortVL_2_1 = 2'h2;
    lockedVL_0 = 1'h0;
    lockedVL_0_1 = 1'h0;
    lockedVL_1 = 1'h0;
    lockedVL_1_1 = 1'h0;
    lockedVL_2 = 1'h0;
    lockedVL_2_1 = 1'h0;
    selectedIO_reg_0 = 1'h0;
    selectedIO_reg_0_1 = 1'h0;
    selectedIO_reg_0_2 = 1'h0;
    selectedIO_reg_1 = 1'h0;
    selectedIO_reg_1_1 = 1'h0;
    selectedIO_reg_1_2 = 1'h0;
    selectedIO_reg_2 = 1'h0;
    selectedIO_reg_2_1 = 1'h0;
    selectedIO_reg_2_2 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N) if (EN_out_ports_0_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_0_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_1_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_1_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_2_putNonFullVCs) $write("");
    if (RST_N) if (EN_out_ports_2_putNonFullVCs) $write("");
    if (RST_N)
      if (outport_encoder___d499[2] &&
	  flitBuffers$deq[10] != fifo_out__h17848)
	$write("");
    if (RST_N)
      if (outport_encoder___d498[2] &&
	  flitBuffers_1$deq[10] != fifo_out__h18805)
	$write("");
    if (RST_N)
      if (outport_encoder___d497[2] &&
	  flitBuffers_2$deq[10] != fifo_out__h19351)
	$write("");
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 &&
	  (outport_encoder___d497[2] ?
	     outport_encoder___d497[1:0] != 2'd0 &&
	     IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d491 :
	     IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d491))
	$write("");
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d512)
	$display("Dynamic assertion failed: \"RouterSimple.bsv\", line 759, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d512)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d512)
	$display("Dynamic assertion failed: \"RouterSimple.bsv\", line 780, column 47\nAllocation selected input port with invalid flit!");
    if (RST_N)
      if (EN_out_ports_0_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d468 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_NOT_out_ETC___d512)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 &&
	  (outport_encoder___d497[2] ?
	     outport_encoder___d497[1:0] != 2'd1 &&
	     IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d492 :
	     IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d492))
	$write("");
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513)
	$display("Dynamic assertion failed: \"RouterSimple.bsv\", line 759, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513)
	$display("Dynamic assertion failed: \"RouterSimple.bsv\", line 780, column 47\nAllocation selected input port with invalid flit!");
    if (RST_N)
      if (EN_out_ports_1_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d474 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d513)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 &&
	  (outport_encoder___d497[2] ?
	     outport_encoder___d497[1:0] != 2'd2 &&
	     IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d493 :
	     IF_outport_encoder_57_BIT_2_58_THEN_NOT_outpor_ETC___d493))
	$write("");
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514)
	$display("Dynamic assertion failed: \"RouterSimple.bsv\", line 759, column 47\nOutput selected invalid flit!");
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514)
	$finish(32'd0);
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514)
	$display("Dynamic assertion failed: \"RouterSimple.bsv\", line 780, column 47\nAllocation selected input port with invalid flit!");
    if (RST_N)
      if (EN_out_ports_2_getFlit &&
	  IF_outport_encoder_83_BIT_2_84_THEN_outport_en_ETC___d476 &&
	  IF_IF_outport_encoder_83_BIT_2_84_THEN_IF_outp_ETC___d514)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkRouterCoreSimple

