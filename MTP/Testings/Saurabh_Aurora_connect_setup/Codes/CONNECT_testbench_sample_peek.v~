`ifndef XST_SYNTH
`timescale 1ns / 1ps
`include "connect_parameters.v"
module CONNECT_testbench_sample_peek();
  parameter HalfClkPeriod = 3.2;
  localparam ClkPeriod = 2*HalfClkPeriod;
  // non-VC routers still reeserve 1 dummy bit for VC.
  parameter vc_bits = (`NUM_VCS > 1) ? $clog2(`NUM_VCS) : 1;
  parameter dest_bits = $clog2(`NUM_USER_RECV_PORTS);
  localparam flit_port_width = 2 /*valid and tail bits*/+ `FLIT_DATA_WIDTH + dest_bits + vc_bits;
  localparam credit_port_width = 1 + vc_bits; // 1 valid bit
  localparam test_cycles = 200;
  reg Clk;
  reg Rst_n;
  wire user_clk_i;
  // input regs
  reg EN_send_port [0:`NUM_USER_SEND_PORTS-1]; // enable sending flits
  reg [flit_port_width-1:0] flit_in [0:`NUM_USER_SEND_PORTS-1]; // send port inputs
  reg send_credit [0:`NUM_USER_RECV_PORTS-1]; // enable sending credits
  reg [credit_port_width-1:0] credit_in [0:`NUM_USER_RECV_PORTS-1]; //recv port credits
  // output wires
  wire [credit_port_width-1:0] credit_out [0:`NUM_USER_SEND_PORTS-1];
  wire [flit_port_width-1:0] flit_out [0:`NUM_USER_RECV_PORTS-1];
  reg [31:0] cycle;
  integer i,j;
  // packet fields
  reg is_valid;
  reg is_tail;
  reg [dest_bits-1:0] dest;
  reg [vc_bits-1:0]   vc;
  reg [`FLIT_DATA_WIDTH-1:0] data;
  // Generate Clock
  initial Clk = 0;
  initial j = 0;
  always #(HalfClkPeriod) Clk = ~Clk;
  // Run simulation 
  initial begin 
	 dest = 2;
	 data = 16'ha;
    cycle = 0;
    for(i = 0; i < `NUM_USER_SEND_PORTS; i = i + 1) 
	 begin 
		 flit_in[i] = 0; 
		 EN_send_port[i] = 0; 
	 end
    for(i = 0; i < `NUM_USER_RECV_PORTS; i = i + 1) 
	 begin 
		 credit_in[i] = 'b1; 
		 send_credit[i] = 'b1; 
	 end //constantly provide credits
    
    $display("---- Performing Reset ----");
    Rst_n = 0; // perform reset (active low) 
    #(5*ClkPeriod+HalfClkPeriod); 
    Rst_n = 1; 
    #(HalfClkPeriod);
  end
// Send data and Monitor arriving flits
always @ (posedge user_clk_i) 
begin
	if (j < `NUM_USER_SEND_PORTS) begin
		EN_send_port[j] = 1'b1;
		is_valid = 1'b1;
		is_tail = 1'b0;
		vc = 0;
		flit_in[j] = {is_valid, is_tail, dest, vc, data};
		$display("@%3d: Sending flit %x into send port %0d from Router %0d to Router %0d", cycle, flit_in[j], j, j, dest);
		wait (flit_out[dest][flit_port_width-1]) //begin
		$display("@%3d: Receiving flit %x at receive port %0d", cycle, flit_out[dest], dest);
		data = data +1;
		dest = (j+1)%4;
		EN_send_port[j] = 1'b0;
		flit_in[j] = 'b0;
		j = (j + 1) % 4;
	end
	else
		$finish();
	end
	
myNetworkAurora dut
(
	.RESET(RESET),
	.INIT_CLK1(Clk),
	.INIT_CLK2(Clk),
	.GTPD5_P1(Clk),
	.GTPD5_N1(!Clk),
	.GTPD5_P2(Clk),
	.GTPD5_N2(!Clk),
	.CHANNEL_UP(channel_up),
	.USER_CLK(user_clk_i),

	.send_ports_0_putFlit_flit_in(flit_in[0]),
	.EN_send_ports_0_putFlit(EN_send_port[0]),

	.EN_send_ports_0_getNonFullVCs(1'b1), // drain credits
	.send_ports_0_getNonFullVCs(credit_out[0]),

	.send_ports_1_putFlit_flit_in(flit_in[1]),
	.EN_send_ports_1_putFlit(EN_send_port[1]),

	.EN_send_ports_1_getNonFullVCs(1'b1), // drain credits
	.send_ports_1_getNonFullVCs(credit_out[1]),
	
	.send_ports_2_putFlit_flit_in(flit_in[2]),
	.EN_send_ports_2_putFlit(EN_send_port[2]),

	.EN_send_ports_2_getNonFullVCs(1'b1), // drain credits
	.send_ports_2_getNonFullVCs(credit_out[0]),

	.send_ports_3_putFlit_flit_in(flit_in[3]),
	.EN_send_ports_3_putFlit(EN_send_port[3]),

	.EN_send_ports_3_getNonFullVCs(1'b1), // drain credits
	.send_ports_3_getNonFullVCs(credit_out[1]),

	.EN_recv_ports_0_getFlit(1'b1), // drain flits
	.recv_ports_0_getFlit(flit_out[0]),

	.recv_ports_0_putNonFullVCs_nonFullVCs(credit_in[0]),
	.EN_recv_ports_0_putNonFullVCs(send_credit[0]),

	.EN_recv_ports_1_getFlit(1'b1), // drain flits
	.recv_ports_1_getFlit(flit_out[1]),

	.recv_ports_1_putNonFullVCs_nonFullVCs(credit_in[1]),
	.EN_recv_ports_1_putNonFullVCs(send_credit[1]),

	.EN_recv_ports_2_getFlit(1'b1), // drain flits
	.recv_ports_2_getFlit(flit_out[2]),

	.recv_ports_2_putNonFullVCs_nonFullVCs(credit_in[0]),
	.EN_recv_ports_2_putNonFullVCs(send_credit[2]),

	.EN_recv_ports_3_getFlit(1'b1), // drain flits
	.recv_ports_3_getFlit(flit_out[3]),

	.recv_ports_3_putNonFullVCs_nonFullVCs(credit_in[1]),
	.EN_recv_ports_3_putNonFullVCs(send_credit[3])
);

endmodule

`endif
